{
	"info": {
		"_postman_id": "510a907d-e6ba-4a89-93e9-8c0a5966cfc2",
		"name": "Teampostman_Api_Task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27913516"
	},
	"item": [
		{
			"name": "Get All Todo Entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData.links[5].rel)\r",
									"pm.environment.set(\"links\",jsonData.links[5].rel);\r",
									"\r",
									"console.log(jsonData.links[1].rel)\r",
									"pm.environment.set(\"links\",jsonData.links[1].rel);\r",
									"\r",
									"console.log(jsonData.title)\r",
									"pm.environment.set(\"title\",jsonData.title );\r",
									"\r",
									"console.log(jsonData.apiVersion)\r",
									"pm.environment.set(\"apiVersion\", jsonData.apiVersion);\r",
									"\r",
									"console.log(jsonData.paymentCurrency)\r",
									"pm.environment.set(\"paymentCurrency\", jsonData.paymentCurrency);\r",
									"pm.environment.set(\"basecategories\", jsonData.categories);\r",
									"pm.environment.set(\"basescopes\", jsonData.scopes);\r",
									"pm.environment.set(\"baseapp\", jsonData.apps);\r",
									"pm.environment.set(\"link5\", jsonData.links[5].rel);\r",
									"pm.environment.set(\"link2\", jsonData.links[2].rel);\r",
									"pm.environment.set(\"link3\", jsonData.links[3].rel);\r",
									"\r",
									"pm.environment.set(\"link1\", jsonData.links[1].rel);\r",
									"pm.environment.set(\"link4\", jsonData.links[4].rel);\r",
									"\r",
									"\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.links)\r",
									"console.log(jsonData.title)\r",
									"console.log(jsonData.paymentCurrency)\r",
									"console.log(jsonData.links[5].rel)\r",
									"console.log(jsonData.links[0].rel)\r",
									"\r",
									"\r",
									"pm.test(\"confirm that apiVersion is 6.3.8.0\", function () {\r",
									"    pm.expect(jsonData.apiVersion).to.eql(\"6.3.8.0\");\r",
									"});\r",
									"\r",
									"pm.test(\"confirm that links[5].rel is jsonrpc\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.links[5].rel).to.eql(\"jsonrpc\");\r",
									"});\r",
									"pm.test(\"confirm that title is Fusio\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(\"Fusio\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text(jsonData.title)).to.include(\"Fusio\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text(jsonData.paymentCurrency)).to.include(\"EUR\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/index.php/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"index.php",
								""
							],
							"query": [
								{
									"key": "root",
									"value": "{{Base links}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.get(\"base_url\");\r",
									"pm.environment.set(\"base_url\", \"https://demo.fusio-project.org\");\r",
									"\r",
									"\r",
									"pm.test(\"Status code should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Status code should have an OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(jsonData)\r",
									"    console.log(jsonData.categories)\r",
									"    console.log(jsonData.scopes)\r",
									"    console.log(jsonData.apps)\r",
									"    console.log(jsonData.apps)\r",
									"    console.log(jsonData.categories[0].authorization)\r",
									"    \r",
									"    \r",
									"\r",
									"pm.test(\"confirm that categories is undefined\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.categories[0].authorization).to.eql(undefined);\r",
									"});\r",
									"pm.test(\"confirm that links[4].rel is health \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.links[4].rel).to.eql(\"health\");\r",
									"});\r",
									"\r",
									"pm.test(\"confirm that links[1].rel is openapi \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.links[1].rel).to.eql(\"openapi\");\r",
									"});\r",
									"\r",
									"pm.test(\"confirm that links[2].rel is documentation\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.links[2].rel).to.eql(\"documentation\");\r",
									"});\r",
									"pm.test(\"confirm that links[3].rel is route\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.links[3].rel).to.eql(\"route\");\r",
									"});\r",
									"pm.test(\"confirm that links[6].rel is oauth2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.links[6].rel).to.eql(\"oauth2\");\r",
									"});\r",
									"pm.test(\"confirm that links[7].rel is whoami\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.links[7].rel).to.eql(\"whoami\");\r",
									"});\r",
									"pm.test(\"confirm that links[8].rel is about\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.links[8].rel).to.eql(\"about\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"strictSSL": true,
						"followAuthorizationHeader": true,
						"followOriginalHttpMethod": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/index.php/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"index.php",
								""
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/index.php/?todo_links={{Base links}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"index.php",
								""
							],
							"query": [
								{
									"key": "todo_links",
									"value": "{{Base links}}"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				},
				{
					"name": "Get entry per ID - Invalid ID(params not using TODO ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/index.php/?links=100000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"index.php",
								""
							],
							"query": [
								{
									"key": "links",
									"value": "100000000"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get Books - valid book type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"console.log(jsonData)\r",
									"\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    \r",
									"    pm.expect(jsonData).to.eql(jsonData);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"const response = pm.response.json();\r",
									"console.log(response[2].name)\r",
									"console.log(response[1].name)\r",
									"console.log(response[0].name)\r",
									"console.log(response[3].name)\r",
									"console.log(response[4].name)\r",
									"console.log(response[5].name)\r",
									"\r",
									"pm.test(\"serch for name with Viscount Who Loved Me\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(response[5].name).to.eql(\"Viscount Who Loved Me\");\r",
									"});\r",
									"\r",
									"pm.test(\"search the name \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql();\r",
									"});\r",
									"\r",
									"console.log(response[1].id);\r",
									"console.log(response[0].id);\r",
									"console.log(response[2].id);\r",
									"console.log(response[3].id);\r",
									"console.log(response[4].id);\r",
									"console.log(response[5].id);\r",
									"pm.environment.set(\"just as i am\",response[1].id);\r",
									"pm.environment.set(\"id5\",response[4].id);\r",
									"pm.environment.set(\"id4\",response[3].id);\r",
									"pm.environment.set(\"id1\",response[0].id);\r",
									"pm.environment.set(\"id3\",response[2].id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/books?id5={{id5}}",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "id5",
									"value": "{{id5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books - invalid book type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/books?id2={{id1}}000000",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "id2",
									"value": "{{id1}}000000"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Place a book order - using valid book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"console.log(jsonData.created)\r",
									"\r",
									"pm.test(\"confirm that id book is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code has a Created string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"    const OrderID = pm.response.json();\r",
									"    console.log(OrderID)\r",
									"    console.log(OrderID.orderId)\r",
									"\r",
									"pm.globals.set(\"OrderID\",OrderID.orderId );\r",
									"pm.collectionVariables.set(\"OrderID\", OrderID.orderId);\r",
									"pm.environment.set(\"orderId\", OrderID.orderId);\r",
									"\r",
									"\r",
									"\r",
									"    \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"bookId\": {{id4}},\r\n    \"customerName\": \"stella\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API CLIENT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"const error = pm.response.json();\r",
									"    console.log(error)\r",
									"\r",
									"pm.test(\"confirm that an error is seen with same email\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"API client already registered. Try a different email.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Accesstoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\": \"post\",\r\n    \"clientEmail\": \"stellaanyanwu93@gmail.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/api-clients",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"api-clients"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order - using invalid book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const error = pm.response.json();\r",
									"    console.log(error)\r",
									"\r",
									"pm.test(\"confirm that an error is seen when you us no bookId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Invalid or missing bookId.\");\r",
									"});\r",
									"    \r",
									"    \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders?id={{id33}}",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "id",
									"value": "{{id33}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order - using no book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code should have 400 string \", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code should have Bad Request \", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"    const error = pm.response.json();\r",
									"    console.log(error)\r",
									"\r",
									"pm.test(\"confirm that an error is seen when you us no bookId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eql(\"Invalid or missing bookId.\");\r",
									"});\r",
									"\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders?id4=",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "id4",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code has an OK string attached\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"    \r",
									"\r",
									"    \r",
									"    \r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders?bookid={{OrderID}}",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "bookid",
									"value": "{{OrderID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using a valid order number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using an invalid order number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderID1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using no order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order - using no order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order - using valid order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"    \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url2}}/orders/:orderId",
							"host": [
								"{{base_url2}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{OrderID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order - using invalid order ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is not 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{Token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url2}}/orders/:orderId",
					"host": [
						"{{base_url2}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{OrderID1}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Token",
			"value": "",
			"type": "string"
		},
		{
			"key": "OrderID",
			"value": ""
		}
	]
}